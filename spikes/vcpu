#!/usr/bin/env perl

use v5.18.1;
use strict;
use warnings;

use JSON::MaybeXS;
use Data::Dumper;
use Solaris::kstat;
use Time::HiRes  qw( clock_nanosleep CLOCK_HIGHRES );
use IO::Async::Loop;
use Net::AMQP::RabbitMQ;

my $coder = JSON::MaybeXS->new->ascii;

my $hostname = qx{/bin/uname -n};
chomp($hostname);

my $loop = IO::Async::Loop->new;
my $mq    = Net::AMQP::RabbitMQ->new();
my $queue = "$hostname";

$mq->connect(
  # "nydevsol10.dev.bloomberg.com",
  "localhost",
  {
    user   => 'guest',
    pass   => 'guest',
  },
);

$mq->channel_open(1);

$mq->exchange_declare(1, "amq.direct",
  { exchange_type => 'direct',
    durable       => 1,
  }
);

$mq->queue_declare(1, $queue);



my $fields = {
  #field => { name => { value => stat } },
  #minf  => { vm => { value => [ 'as_fault', 'hat_fault' ], }, },
  #mjf   => { vm => { value => 'maj_fault', }, },
  xcal  => { sys => { value => 'xcalls', }, },
  intr  => { sys => { value => 'intr',
                      width => 5, },
           },
  ithr  => { sys => { value => 'intrthread', }, },
  csw   => { sys => { value => 'pswitch',
                      width => 4, },
           },
  icsw  => { sys => { value => 'inv_swtch', }, },
  migr  => { sys => { value => 'cpumigrate', }, },
  smtx  => { sys => { value => 'mutex_adenters', }, },
  syscl => { sys => { value => 'syscall', }, },
  usr   => { sys => { value => 'cpu_nsec_user',
                      time  => 1, },
           },
  sys   => { sys => { value => 'cpu_nsec_kernel',
                      time  => 1, },
           },
  idl   => { sys => { value => 'cpu_nsec_idle',
                      time  => 1, },
           },
  # NOTE: This is a subset of sys / cpu_nsec_kernel
  intr  => { sys => { value => 'cpu_nsec_intr',
                      time  => 1, },
           },
};

my $k = Solaris::kstat->new();

# Prime the kstat by reading the data we intend to use in this script.  In this
# case, that's cpu:<all instances>:sys
foreach my $instance ( keys %{$k->{cpu}} ) {
  () = each %{$k->{cpu}->{$instance}->{sys}};
}

my $i = 0;
my @data;
my $gen  = 0;
my $interval = 1_000_000_000;  # 1 sec in nsecs
my $goal_ns  = $k->gethrtime + $interval;

# Initialize the @data array
$data[$gen ^ 1] = $k->copy();
$k->update();
$data[$gen]     = $k->copy();

while (1) {
  my $start_ns = $k->gethrtime;
  $k->update();
  $gen = $gen ^ 1;
  $data[$gen] = $k->copy();
  my $data_to_return = [];

  foreach my $cpu (sort { $a <=> $b } keys %{$data[$gen]->{cpu}}) {
    $data_to_return->[$cpu] = {};
    $data_to_return->[$cpu]->{CPU} = $cpu;
    if (defined($data[$gen ^ 1])) {
      foreach my $field ( qw(idl) ) {
        my ($name) = keys %{$fields->{$field}};
        my ($stat) = $fields->{$field}->{$name}->{value};
        # Skip if snaptimes are identical - this may happen on the first
        # pass through this loop
        next if ($data[$gen]->{cpu}->{$cpu}->{$name}->{snaptime} ==
                 $data[$gen ^ 1]->{cpu}->{$cpu}->{$name}->{snaptime});
        #say "kstat name: $name";
        #say "kstat stat info: " . Dumper( $stat );
        #say "OLD: " . $data[$gen]->{$cpu}->{$name}->{snaptime};
        #say "NEW: " . $data[$gen ^ 1]->{$cpu}->{$name}->{snaptime};
        my $time_pct =
          (($data[$gen]->{cpu}->{$cpu}->{$name}->{$stat} -
            $data[$gen ^ 1]->{cpu}->{$cpu}->{$name}->{$stat}
           )   /
            ( $data[$gen]->{cpu}->{$cpu}->{$name}->{snaptime} -
              $data[$gen ^ 1]->{cpu}->{$cpu}->{$name}->{snaptime}
            )) * 100;
        my $rounded_pct = int($time_pct + 0.5);
        #say "CPU $cpu: $field " . sprintf("%3.0f%%", $rounded_pct);
        $data_to_return->[$cpu]->{$field} = $rounded_pct;
      }
    }
  }

  #say encode_json( $data_to_return );
  my $complete_ns = $k->gethrtime;
  my $remaining_nsec_in_interval = $goal_ns - $complete_ns;
  $goal_ns += $interval;
  if ($remaining_nsec_in_interval > 1000) {
    #say "nanosleeping for $remaining_nsec_in_interval nsecs";
    clock_nanosleep( CLOCK_HIGHRES, $remaining_nsec_in_interval );
  }
  my $awakened = $k->gethrtime;
  my $elapsed = $awakened - $start_ns;
  say "ELAPSED: $elapsed nsecs";
  $mq->publish(1, $queue, $coder->encode( $data_to_return ));
}

